@page "/edit-tag/{Id:int}"
@using PersonalExpenseTrackerApp.Data
@using System.Text.Json
@using System.IO

<h3 class="mb-4">Edit Tag</h3>

<div class="card shadow-sm">
    <div class="card-header">
        <h5 class="card-title mb-0">Edit Tag</h5>
    </div>
    <div class="card-body">
        <EditForm Model="@tagModel" OnValidSubmit="HandleValidSubmit">
            <div class="mb-3">
                <label for="title" class="form-label">Title</label>
                <InputText id="title" class="form-control" @bind-Value="tagModel.Title" />
            </div>

            <div class="d-flex justify-content-end">
                <button type="submit" class="btn btn-primary">Save</button>
            </div>
        </EditForm>

        @if (successMessage != null)
        {
            <div class="alert alert-success mt-3">@successMessage</div>
        }

        @if (errorMessage != null)
        {
            <div class="alert alert-danger mt-3">@errorMessage</div>
        }
    </div>
</div>

@code {
    [Parameter] public int Id { get; set; }  // This will capture the tag Id from the URL.
    private Tags tagModel = new Tags();
    private string successMessage;
    private string errorMessage;
    private string filePath = @"C:\AD\tags.json";

    protected override async Task OnInitializedAsync()
    {
        await LoadTag();
    }

    private async Task LoadTag()
    {
        if (File.Exists(filePath))
        {
            string jsonData = await File.ReadAllTextAsync(filePath);
            var tagsList = JsonSerializer.Deserialize<List<Tags>>(jsonData) ?? new List<Tags>();
            tagModel = tagsList.FirstOrDefault(tag => tag.Id == Id); // Find the tag by Id
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            // Load existing tags
            List<Tags> tagsList = new List<Tags>();
            if (File.Exists(filePath))
            {
                string jsonData = await File.ReadAllTextAsync(filePath);
                tagsList = JsonSerializer.Deserialize<List<Tags>>(jsonData) ?? new List<Tags>();
            }

            // Find the tag and update it
            var tagToUpdate = tagsList.FirstOrDefault(tag => tag.Id == Id);
            if (tagToUpdate != null)
            {
                tagToUpdate.Title = tagModel.Title;

                // Serialize the list and save back to the file
                string updatedJsonData = JsonSerializer.Serialize(tagsList, new JsonSerializerOptions { WriteIndented = true });
                await File.WriteAllTextAsync(filePath, updatedJsonData);

                successMessage = "Tag updated successfully!";
            }
            else
            {
                errorMessage = "Tag not found!";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating tag: {ex.Message}";
        }
    }

    public class Tags
    {
        public int Id { get; set; }
        public string Title { get; set; }
    }
}
